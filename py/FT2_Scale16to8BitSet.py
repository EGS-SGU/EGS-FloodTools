#! /usr/bin/env python
# -*- coding: Latin-1 -*-

__revision__ = "--REVISION-- : $Id: FT2_Scale16to8BitSet.py 602 2016-10-25 16:46:17Z vneufeld $"

#==============================================================================#
# HISTORY                                                                      #
# -------                                                                      #
# Originally developed as ArCGIS Toolbox "2_Scale_16to_8bit_set0.py" by        #
# A. Deschamps, converted  to Python Toolbox and altered by V. Neufeld,        #
# September 2016.                                                              #
#==============================================================================#


# Libraries
# =========
import arcpy
from   arcpy.sa import *
import argparse
import glob
import os
import shutil
import sys
import traceback


# ======= #
# Globals #
# ======= #


class FT2_Scale16to8BitSet(object):
    """
    Performs second step in creating Flood Product.

    Is the second tool called in the procedure used to generate Flood Products.
    Starting in the workspace root directory, creates all subdirectories it
    requires if they are not already present (Scaled, Scaled_Unfiltered, Scratch),
    then processes one or more polarized image files (HH, HV, VV, VH), selected
    from those that were produced by the FT1_R2ReadOrthoMosaic tool and placed
    in the Mosaic subdirectory.  Processing includes transforming from 16-bit to
    8-bit, and applying a 3x3 rectangular median filter to smooth the results in
    an attempt to reduce the speckle noise, thereby reducing the number of
    'holes' and associated polygons that will be generated by the third tool in
    the procedure that uses the images produced herein
    (FT3_ExtractFloodExtentAndConvertToVector).

    Instance Attributes
        label           : Shown in Label text box when Properties dialog box is
                          opened by right-clicking the tool in the Catalog Tree
                          and selecting the "Properties..." menu.

        description     : Shown in Description text box when Properties dialog
                          box is opened by right-clicking the tool in the
                          Catalog Tree and selecting the "Properties..." menu.

        category        : Toolset grouping to which this belongs.  Allows all
                          tools that belong to a shared theme to be grouped
                          together under a common umbrella.

        canRunInBackground
                        : Controls whether the tool can be run in the background
                          or requires the Results window to be opened and will
                          block other work from being performed in parallel
                          while this script is running.

    Class Attributes
        idxChangeField  : An essential custom class attribute, is used to keep
                          track of the last parameter that was changed when
                          running the tool in GUI mode through ArcCatalog or
                          ArcMap.  It's value is set in the "updateParameters"
                          method and is employed in "updateMessages" to enable
                          previously disabled fields and to identify which
                          fields require validations to be performed on them
                          when they are changed.  This technique is meant to
                          mimic event handlers found in other programming
                          languages.  The variable will not work as required if
                          it is defined as an instance attribute, however it is
                          possible to use an equivalent global variable instead,
                          if desired.
    """
    # Class Variables (Custom)
    # ------------------------
    SUPPORTED_CONTRASTSTRETCH = ["Min-Max Range",
                                 "Min-90% Max Range",
                                 "95% Confidence Interval", # "Mean ± 1.96 StdDev"
                                 "99% Confidence Interval"] # "Mean ± 2.5  StdDev"
    idxChangeField  = None


    def __init__(self):
        """
        Part of the Python toolbox template, used to define the tool (tool name
        is the name of the class).

        A Python Toolbox can have more than one tool defined within it.  Each
        will have its own constructor like this that will uniquely identify it.


        Parameters:
            None


        Return Values:
            None


        Limit(s) and Constraint(s) During Use:
            The "canRunInBackground" MUST be set to 'True'.  If this is not
            done, will not run 64-bit version of Python in the "execute" method
            and the PCI Geomatica tools will not be available.
        """
        self.label              = "FT2_Scale16to8BitSet"
        self.description        = "Second step in generating Flood Product.  " \
                                  "Transforms 16-bit polarized SAR images to " \
                                  "8-bit, and applies 3x3 rectangular median " \
                                  "smoothing filter."
        self.canRunInBackground = False
##        self.canRunInBackground = True
##        self.category           = "FloodTools"


    def getParameterInfo(self):
        """
        Part of the Python toolbox template, used to define the parameters that
        are used throughout the tool.

        Is an essential method since it defines all parameters and their
        attributes that are necessary for proper tool functioning.  These
        parameters are used to create the data entry fields seen in the GUI and
        are exchanged through all of the methods fundamental to the Python tool.
        Their attributes define what dataypes they accept, how many values they
        will accept, whether or not they are mandatory, and their direction of
        exchange -- input or output.

        While GUI operations launched through ArcCatalog or ArcMap will
        automatically call this method, the method must be called by the command
        line implementation in function "main()" or by the unitest module when
        when preparing an object for testing.


        Parameters:
            None


        Return Values:
            Parameter[]  All Parameter objects defined and required for the
                         tool, and their values.


        Limit(s) and Constraint(s) During Use:
            None

            For more details refer to following links:
            Python Toolbox
            http://resources.arcgis.com/EN/HELP/MAIN/10.2/index.html#/The_Python_toolbox_template/001500000023000000/
            getParameterInfo Method
            http://resources.arcgis.com/en/help/main/10.2/index.html#//001500000028000000
        """
        params = [None]*3

        params[0] = arcpy.Parameter(
                     displayName   = "Workspace",
                     name          = "workspace",
                     datatype      = "DEFolder",
                     parameterType = "Required",
                     direction     = "Input"
                     )
        params[0].value = None

        params[1] = arcpy.Parameter(
                        displayName   = "16-Bit Polarized SAR Image",
                        name          = "sarImage16Bit",
                        datatype      = "GPString",
                        parameterType = "Required",
                        direction     = "Input",
                        multiValue    = "True"
                     )
        params[1].enabled     = True
        params[1].value       = None
        params[1].filter.type = "ValueList"
        params[1].filter.list = []

        params[2] = arcpy.Parameter(
                        displayName   = "Constrast Stretch",
                        name          = "constrastStretch",
                        datatype      = "GPString",
                        parameterType = "Required",
                        direction     = "Input"
                     )
        params[2].filter.type = "ValueList"
        params[2].filter.list = FT2_Scale16to8BitSet.SUPPORTED_CONTRASTSTRETCH
        params[2].value       = params[2].filter.list[0]    # "Min-Max Range"

        return params


    def isLicensed(self):
        """
        Part of the Python toolbox template, should be set to indicate whether
        or not the tool is licensed to execute.

        Is not being used in this implementation.  As ArcGIS documentation
        states:
            'It can be used to restrict the tool from being run if the
             appropriate licenses and extensions required to run other
             geoprocessing tools used by the Python toolbox tool are not
             available.'

            'If the isLicensed method returns False, the tool cannot be
             executed.  If the method returns True or the method is not used,
             the tool can be executed.'


        Parameters:
            None


        Return Values:
            True - Will always return True since licensing checks are not being
                   performed.  Might be implemented as follows, for example, if
                   licensing was an issue:

                   # Allow the tool to execute, only if the ArcGIS 3D Analyst
                   # extension is available.
                   try:
                       if arcpy.CheckExtension("3D") != "Available":
                           raise Exception
                   except Exception:
                       return False # tool cannot be executed
                   return True      # tool can    be executed


        Limit(s) and Constraint(s) During Use:
            None

            For more details refer to following links:
            Python Toolbox
            http://resources.arcgis.com/EN/HELP/MAIN/10.2/index.html#/The_Python_toolbox_template/001500000023000000/
            isLicensed Method
            http://resources.arcgis.com/en/help/main/10.2/index.html#//001500000025000000
        """
        return True


    def updateParameters(self, parameters):
        """
        Part of the Python toolbox template, called whenever a parameter has
        been changed.

        This method serves as a rough equivalent of the event handlers found in
        other programming languages.  Its purported use is to modify the values
        and properties of parameters before internal validation is performed.
        In practice, however, it has been found that making such changes here,
        programatically, does not achieve the desired results, so instead the
        method has been used to simply identify which parameter has just been
        changed and record its index value in the custom "idxChangeField" field.
        The application will next automatically call the "updateMessages" method
        which has been designed to examine the "idxChangeField" parameter and
        act on the change.


        Parameters:
            TYPE        NAME            DESCRIPTION
            Parameter[] parameters      All Parameter objects defined in the
                                        "getParameterInfo" method of the tool,
                                        and their values.  This includes both
                                        mandatory and optional parameters.  Will
                                        be assigned new values through the GUI's
                                        data entry fields which in turn will
                                        trigger a call to this method when a
                                        change has occurred.


        Return Values:
            None


        Limit(s) and Constraint(s) During Use:
            None

            For more details refer to following links:
            Python Toolbox
            http://resources.arcgis.com/EN/HELP/MAIN/10.2/index.html#/The_Python_toolbox_template/001500000023000000/
            updateParameters Method
            http://resources.arcgis.com/en/help/main/10.2/index.html#//00150000002m000000
            Parameters
            http://resources.arcgis.com/EN/HELP/MAIN/10.2/index.html#/Accessing_parameters_within_a_Python_toolbox/001500000037000000/
        """
        # Python toolboxes do not support conventional event handlers as seen in
        # other programming languages to react to changes in GUI controls.
        # Identify which control has changed now, for reference subsequently
        # within the "updateMessages" method.  If have loaded a workspace,
        # look for TIF images within the "Mosaic" subdirectory, if they exist,
        # and load them into the "16-Bit Polarized SAR Image" field, selecting
        # one as a default for processing.
        for i in range(0, len(parameters)):
            if parameters[i].hasBeenValidated == False:
                FT2_Scale16to8BitSet.idxChangeField = i
                break
        if FT2_Scale16to8BitSet.idxChangeField == 0:
            if parameters[0].value != None:
                self.load16BitSarImageField(parameters)
        return


    def updateMessages(self, parameters):
        """
        Part of the Python toolbox template, called after internal validation,
        can be used to modify the messages created by internal validation for
        each tool parameter.

        In this implementation, it confirms that the Workspace exists, is
        accessible, contains the "Mosaic" subdirectory and at least one TIF file
        within that directory.


        Parameters:
            TYPE        NAME            DESCRIPTION
            Parameter[] parameters      All Parameter objects defined in the
                                        "getParameterInfo" method of the tool,
                                        and their values.  This includes both
                                        mandatory and optional parameters.  Will
                                        be assigned new values through the GUI's
                                        data entry fields which in turn will
                                        trigger a call to this method.


        Return Values:
            None


        Limit(s) and Constraint(s) During Use:
            None

            For more details refer to following links:
            Python Toolbox
            http://resources.arcgis.com/EN/HELP/MAIN/10.2/index.html#/The_Python_toolbox_template/001500000023000000/
            updateMessages Method
            http://resources.arcgis.com/en/help/main/10.2/index.html#//00150000002m000000
            Parameters
            http://resources.arcgis.com/EN/HELP/MAIN/10.2/index.html#/Accessing_parameters_within_a_Python_toolbox/001500000037000000/
        """
        # Index of last changed field, identified in "updateParameters":
        # - Workspace
        if FT2_Scale16to8BitSet.idxChangeField == 0:
            if parameters[0].value != None:
                msgText = FT2_Scale16to8BitSet.validateWorkspace(str(parameters[0].value))
                if msgText:
                    parameters[0].setErrorMessage( msgText )

        return


    def execute(self, parameters, messages):
        """
        Part of the Python toolbox template, used to produce the expected output
        of the tool.

        Orchestrates all of the steps required to produce output, called from
        the GUI when the user presses the OK button, or from function "main()"
        at the bottom of this module when command line interface has been
        defined and the script is run in batch.

        In this implementation, "execute" performs the following:
        - checks out and later returns ArcGIS Spatial Analyst tool
        - validates all incoming parameters
            - verifies that workspace directory exists, is accessible, and
              contains the "Mosaic" subdirectory with at least 1 TIF file in it
            - verifies that all TIF files exist and are accessible
        - creates "Scratch", "Scaled" and "Scaled_Unfiltered" folders if they do
          not already exist, and sets the arcpy working/scratch directories to
          point to "Scratch" for those tools that implictly require a working
          space for temporary files
        - processes each selected 16-Bit SAR Image:
            - gathers MIN and MAX 16-bit pixel values
            - stretches image to only include non-NoData values and translates
              each pixel to 8-bit equivalent values
            - creates non-filtered image for inclusion in map (brighter so
              better for visual products)
            - applies 3x3 moving rectangle "median" filter to smooth out to
              smooth out pixel values and reduce speckles in image that will be
              passed to downstream 3rd tool in suite
        - deletes temporary files and directories created as part of
          intermediate processing


        Parameters:
            TYPE        NAME            DESCRIPTION
            Parameter[] parameters      All Parameter objects defined in the
                                        "getParameterInfo" method of the tool,
                                        and their values.  This includes both
                                        mandatory and optional parameters.  Will
                                        be assigned values through the GUI's
                                        data entry fields, or by function
                                        "main()".
            ???         messages        Not used in this instance, can be used
                                        to issue info/warning/error messages.
                                        Have used "arcpy" directly to serve this
                                        role.


        Return Values:
            - 0         Successfully completed.  Script will exit with status 0.
            - 1         Error encountered.  Check log/standard output for
                        details.  The script will exit with this value to
                        inform calling process that problem exists.


        Limit(s) and Constraint(s) During Use:
            None

            For more details refer to following links:
            Python Toolbox
            http://resources.arcgis.com/EN/HELP/MAIN/10.2/index.html#/The_Python_toolbox_template/001500000023000000/
            execute Method
            http://resources.arcgis.com/en/help/main/10.2/index.html#//001500000037000000
            Parameters
            http://resources.arcgis.com/EN/HELP/MAIN/10.2/index.html#/Accessing_parameters_within_a_Python_toolbox/001500000037000000/
            Messages
            http://resources.arcgis.com/en/help/main/10.2/index.html#//001500000036000000
            http://resources.arcgis.com/en/help/main/10.2/index.html#//001500000031000000
        """
        # Initialize status to ERROR, will be reset to SUCCESS if "try" completes
        status       = 1
        fsObj        = None
        rasterObj    = None
        scratchDir   = None
        temp16Raster = None
        try:
            # Open up message log and progress bar
            # ------------------------------------
            arcpy.SetProgressor("default", "Flood Tools - R2 Read Ortho Mosaic")
            arcpy.AddMessage("Python Version: " + sys.version)
            arcpy.AddMessage("Current Product License: " + arcpy.ProductInfo())

            # Ensure overwriting is permitted so the temp files can be reused
            # when more than 1 image is to be processed
            arcpy.env.overwriteOutput = True

            # Ensure required product licenses are available
            # ----------------------------------------------
            # ArcInfo term is deprecated, but is still code for "ArcGIS Advanced"
            checkResults = str(arcpy.CheckProduct("ArcInfo"))
            if checkResults not in ["Available","AlreadyInitialized"]:
                arcpy.AddError("ERROR:  Installation does not have required " \
                               "access to ArcGIS Advanced (ArcInfo) license.")
                return 1
            if arcpy.CheckExtension("Spatial") == "Available":
                arcpy.CheckOutExtension("Spatial")
            else:
                arcpy.AddError("ERROR:  Installation does not have required " \
                               "access to ArcGIS Spatial Analyst license.")
                return 1

            # Ensure mandatory parameters are present, validate where necessary
            # -----------------------------------------------------------------
            # NOTE:
            # While the ArcGIS GUI interface ensures mandatory parameters are
            # present before calling "execute", the command-line or call via the
            # "FT2_Scale16to8BitSet" object does not.
            arcpy.SetProgressorLabel("Validate Mandatory Parameters...")
            arcpy.AddMessage("Validate Mandatory Parameters")

            # Assign parameters to local variables
            # [Note: str() cast of None yields "None"]
            if parameters[0].value == None:
                workspace    = None
            else:
                workspace    = str(parameters[0].value)
            sarFileList      = parameters[1].values
            constrastStretch = parameters[2].value

            # Validate Workspace
            arcpy.SetProgressorLabel("Validate Workspace...")
            arcpy.AddMessage("- Validate Workspace")
            msgText = FT2_Scale16to8BitSet.validateWorkspace(workspace)
            if msgText:
                arcpy.AddError( msgText )
                return 1

            # Validate List Of Selected SAR Images
            arcpy.SetProgressorLabel("Validate 16-Bit SAR Image Files...")
            arcpy.AddMessage("- Validate 16-Bit SAR Image Files")
            msgText = FT2_Scale16to8BitSet.validate16BitSARFiles(sarFileList)
            if msgText:
                arcpy.AddError( msgText )
                return 1

            # Validate Contrast Stretch
            arcpy.SetProgressorLabel("Validate Contrast Stretch...")
            arcpy.AddMessage("- Validate Contrast Stretch\n")
            msgText = FT2_Scale16to8BitSet.validateContrastStretch(constrastStretch)
            if msgText:
                arcpy.AddError( msgText )
                return 1

            # Echo Final Parameters To Log
            # ----------------------------
            # Okay to proceed.  Feedback
            msgText = "Parameter Values\n"       \
                      "- Workspace        : %s\n" \
                      "- SAR Image Files  :\n" % (workspace)
            for sarFileName in sarFileList:
                msgText += "  %s\n" % (str(sarFileName))
            msgText += "- Contrast Stretch : %s\n" % (constrastStretch)
            arcpy.AddMessage(msgText)


            #-------------------------------------------------------------------
            #                  Create Required Subdirectories
            #-------------------------------------------------------------------
            # Create "Scratch", "Scaled", and "Scaled_Unfiltered" subdirectories
            # if they do not already exist to create temporary and intermediate
            # files in.
            arcpy.SetProgressorLabel("Create Subdirectories...")
            arcpy.AddMessage("Create Subdirectories")
            scratchDir          = os.path.join(workspace, 'Scratch')
            scaledDir           = os.path.join(workspace, 'Scaled')
            scaledUnfilteredDir = os.path.join(workspace, 'Scaled_Unfiltered')
            arcpy.AddMessage("- Scratch           Folder: '%s'"   % (scratchDir))
            if not os.path.exists(scratchDir):
                os.mkdir(scratchDir)
            arcpy.AddMessage("- Scaled            Folder: '%s'"   % (scaledDir))
            if not os.path.exists(scaledDir):
                os.mkdir(scaledDir)
            arcpy.AddMessage("- Scaled Unfiltered Folder: '%s'\n" % (scaledUnfilteredDir))
            if not os.path.exists(scaledUnfilteredDir):
                os.mkdir(scaledUnfilteredDir)
            # Set workspaces to scratch directory for tools like
            # "FocalStatistics" to save their working files to.
            arcpy.env.workspace        = scratchDir
            arcpy.env.scratchWorkspace = scratchDir

            #-------------------------------------------------------------------
            #                Process All Selected 16-Bit Images
            #-------------------------------------------------------------------
            arcpy.SetProgressorLabel("Process 16-Bit Images...")
            arcpy.AddMessage("Process 16-Bit Images")
            # Temporary Files
            # NOTE: For some tools, names cannot exceed 13 characters or will
            #       get non-informative error similar to the following:
            #       ERROR:  Encountered exception in 'FT2_Scale16to8BitSet.execute'.
            #       ERROR 010240: Could not save raster dataset to
            #       E:\FloodTest\ON_AlbanyRiverForks_UTM16\20160510_232540_W2\Scratch\tempScaledImage
            #       with output format GRID.
            #       At line line 540 of file 'E:\programming\FEP_Tools\py\FT2_Scale16to8BitSet.py'.
            temp16Raster  = os.path.join(scratchDir,"temp16Raster")
            for i, in16Raster in enumerate(sarFileList):
                out8FRaster  = os.path.join(scaledDir,          (os.path.splitext(os.path.basename(in16Raster))[0] + "_8bit_MED3x3.tif"))
                out8NFRaster = os.path.join(scaledUnfilteredDir,(os.path.splitext(os.path.basename(in16Raster))[0] + "_8bit.tif"))
                msgText = "- IMAGE [%d]\n"                      \
                          "  - Files\n"                         \
                          "    - Source 16-Bit Image : %s\n"    \
                          "    - Target  8-Bit Scaled Images\n" \
                          "      - Filtered          : %s\n"    \
                          "      - Non-Filtered      : %s\n"    \
                          "    - Temp File\n"                   \
                          "      - 16-Bit GRID  Image: %s\n" %  \
                          (i, in16Raster, out8FRaster, out8NFRaster, temp16Raster)
                arcpy.AddMessage(msgText)

                # Copy Raster to produce grids and Extract Statistics.  Grids
                # have internal stats which can be extracted and will be used to
                # normalize the range, stretch the image and convert to 8-bit.
                # A potential problem with this technique occurs when outliers
                # are present that distort the range -- this may be addressed at
                # a future date using mean and standard deviation statistics or
                # some other technique.
                #
                # http://pro.arcgis.com/en/pro-app/tool-reference/data-management/get-raster-properties.htm
                arcpy.SetProgressorLabel("Convert To GRID To Extract Statistics...")
                arcpy.AddMessage ("  - Convert To GRID To Extract Statistics")
                arcpy.CopyRaster_management(in16Raster, temp16Raster, "", "", "0", "NONE", "NONE", "")
                imageMin      = int(arcpy.GetRasterProperties_management(temp16Raster, "MINIMUM").getOutput(0))
                imageMax      = int(arcpy.GetRasterProperties_management(temp16Raster, "MAXIMUM").getOutput(0))
                imageMax90pct = 0.9 * imageMax
                imageMean     = float(arcpy.GetRasterProperties_management(temp16Raster, "MEAN").getOutput(0))
                imageStd      = float(arcpy.GetRasterProperties_management(temp16Raster, "STD").getOutput(0))
                conf95L       = int(imageMean - (1.96 * imageStd))
                conf95U       = int(imageMean + (1.96 * imageStd))
                conf99L       = int(imageMean - (2.50 * imageStd))
                conf99U       = int(imageMean + (2.50 * imageStd))
                msgText = "    - Image Pixel Values\n"              \
                          "      - MIN             = %d\n"          \
                          "      - MAX             = %d\n"          \
                          "      - 90%% MAX         = %d\n"         \
                          "      - MEAN            = %.1f\n"        \
                          "      - STD             = %.1f\n"        \
                          "      - 95%% CONF INT    = %d to %d\n"   \
                          "      - 99%% CONF INT    = %d to %d\n"   \
                          "    - Constrast Stretch = %s\n" %        \
                          (imageMin, imageMax, imageMax90pct, imageMean, imageStd,
                           conf95L, conf95U, conf99L, conf99U, constrastStretch)
                # Correct confidence interval, if required, with right-shift
                if constrastStretch == "95% Confidence Interval":
                    if conf95L < imageMin:
                        delta    = imageMin - conf95L
                        conf95L += delta
                        conf95U += delta
                        msgText += "      - Corrected Confidence Interval\n" \
                                   "        - RIGHT-SHIFT   = %d\n"          \
                                   "        - 95%% CONF INT  = %d to %d\n" % \
                                   (delta, conf95L, conf95U)
                elif constrastStretch == "99% Confidence Interval":
                    if conf99L < imageMin:
                        delta    = imageMin - conf99L
                        conf99L += delta
                        conf99U += delta
                        msgText += "      - Corrected Confidence Interval\n" \
                                   "        - RIGHT-SHIFT   = %d\n"          \
                                   "        - 99%% CONF INT  = %d to %d\n" % \
                                   (delta, conf99L, conf99U)
                arcpy.AddMessage(msgText)

                # Use Raster math and linear stretch to convert to 8-bit.
                # When output may be a float, will add 0.5 to each pixel value
                # to ensure that they will be properly rounded during subsequent
                # call of CopyRaster that simply truncates the values when
                # converting back to integer.
                #
                # http://pro.arcgis.com/en/pro-app/arcpy/classes/raster-object.htm
                #
                # Different options for converting from 16-bit values (0-65535)
                # to 8-bit (0-255) are provided, using a linear contrast stretch.
                # The simplest option uses the full range of actual bit values,
                # but the others may truncate values at the high and sometimes
                # low extremities.  It is necessary to use the CON tool to do
                # this, sometimes nested.  It is not possible to use a Python
                # "conditional expression" (ie. inline "if" statement that's
                # equivalent to a ternary operator) like:
                #
                #    # Min-90% Max Range
                #    rasterObjScaled \
                #    = ((rasterObj - imageMin) * 255 / (imageMax90pct - imageMin)) + 0.5 \
                #       if rasterObj <= imageMax90pct else 255
                #
                #    -- OR --
                #
                #    # 99% Confidence Interval
                #    rasterObjScaled \
                #    = ((rasterObj - conf99L) * 255 / (conf99U - conf99L)) + 0.5  \
                #       if rasterObj >= conf99L and rasterObj <= conf99U else     \
                #       ((conf99L)             * 255 / (conf99U - conf99L)) + 0.5 \
                #        if rasterObj <= conf99U else                             \
                #        ((conf99U)             * 255 / (conf99U - conf99L)) + 0.5
                #
                # or will get error:
                #
                #    The truth value of a raster is ambiguous. Invalid use of
                #    raster with Boolean operator or function. Check the use of
                #    parentheses where applicable.
                #
                # Instead, must use the CON tool.  For example, the solution to
                # the first example above is:
                #
                #    rasterObjScaled \
                #    = Con(rasterObj < imageMax90pct,
                #          ((rasterObj - imageMin) * 255 / (imageMax90pct - imageMin)) + 0.5, 255)
                #
                # http://desktop.arcgis.com/en/arcmap/10.3/tools/spatial-analyst-toolbox/con-.htm
                # http://desktop.arcgis.com/en/arcmap/10.3/guide-books/extensions/spatial-analyst/map-algebra/building-complex-statements.htm
                #
                # For 95% and 99% Confidence Interval conversions, the following
                # rules are applied:
                #
                # - When the actual pixel value is less than the lower
                #   confidence interval value, it's 8-bit value will be set to 1
                #
                # - When the actual pixel value is greater than the upper
                #   confidence interval value, it's 8-bit value will be set to 255
                #
                # - when the lower confidence interval value is less than the
                #   minimum actual value, the lower and upper confidence
                #   interval values will be shifted to the right by an amount
                #   equal to the difference between the minimum actual value and
                #   the lower confidence interval value.  If this is not done,
                #   then the lowest actual value will be translated to a 8-bit
                #   value of something like 30 or more, which means that when
                #   thresholding is done in tool
                #   "FT3_ExtractFloodExtentAndConvertToVector", a range of say
                #   40 to 43 must be specified and the first 29 images generated
                #   will be empty and useless, waste an significant amount of
                #   processing time.
                arcpy.SetProgressorLabel("Scale GRID Image To 8-bit Pixel Values...")
                arcpy.AddMessage ("  - Scale GRID Image To 8-bit Pixel Values")
                rasterObj = arcpy.Raster(temp16Raster)
                if constrastStretch == "Min-Max Range":
                    rasterObjScaled \
                    = ((rasterObj - imageMin) * 255 / (imageMax - imageMin)) + 0.5

                elif constrastStretch == "Min-90% Max Range":
                    rasterObjScaled \
                    = Con(rasterObj < imageMax90pct,
                          ((rasterObj - imageMin) * 255 / (imageMax90pct - imageMin)) + 0.5, 255)

                elif constrastStretch == "95% Confidence Interval":
                    rasterObjScaled \
                    = Con(rasterObj <= conf95L, 1,
                          Con((rasterObj >= conf95L) & (rasterObj < conf95U),
                              ((rasterObj - conf95L) * 255 / (conf95U - conf95L)) + 0.5,
                              Con(rasterObj >= conf95U, 255
                                 )
                             )
                         )
                elif constrastStretch == "99% Confidence Interval":
                    rasterObjScaled \
                    = Con(rasterObj <= conf99L, 1,
                          Con((rasterObj >= conf99L) & (rasterObj < conf99U),
                              ((rasterObj - conf99L) * 255 / (conf99U - conf99L)) + 0.5,
                              Con(rasterObj >= conf99U, 255
                                 )
                             )
                         )
                del rasterObj # Recover memory

                # Apply CopyRaster to round off digits with bit values in the
                # range 0-255 (assigns "NoData" to 256 for a tif), and save to
                # 8-bit image.
                arcpy.SetProgressorLabel("Create Non-Filtered 8-bit TIF Image...")
                arcpy.AddMessage("  - Create Non-Filtered 8-bit TIF Image")
                arcpy.CopyRaster_management(rasterObjScaled, out8NFRaster, "", "", "", "NONE", "NONE", "8_BIT_UNSIGNED")
                del rasterObjScaled # Recover memory

                # Apply Focal Statistics to adjust cell values.  Smoothing is
                # done by assigning the median value of a 3x3 rectangular window
                # to each cell, used to reduce the speckles and number of
                # 'holes' in the flood/non-flood regions, and therefore the
                # number of polygons generated by the third tool to be applied
                # in the series.
                # http://pro.arcgis.com/en/pro-app/tool-reference/spatial-analyst/focal-statistics.htm
                arcpy.SetProgressorLabel("Create Filtered 3x3 Median Focal Stats 8-bit GRID Image...")
                arcpy.AddMessage("  - Create Filtered 3x3 Median Focal Stats 8-bit GRID Image")
                neighborhood = NbrRectangle(3, 3, "CELL")
                fsObj        = FocalStatistics(out8NFRaster, neighborhood, "MEDIAN", "DATA")

                # Copy Raster to create an 8bit tif.
                # The input image will have a Min-Max range of 0-255 but NoData
                # will be -32868 so will therefore default to 16bit in a GRID.
                # CopyRaster does not change the data range but converts the
                # image to TIF format and assigns NoData a value of 256,
                # therefore translating it to 8-bit.
                arcpy.SetProgressorLabel("Create Filtered 8-bit TIF Image...")
                arcpy.AddMessage("  - Create Filtered 8-bit TIF Image\n")
                arcpy.CopyRaster_management(fsObj, out8FRaster, "", "", "", "NONE", "NONE", "8_BIT_UNSIGNED")
                del fsObj # Recover memory

            #-------------------------------------------------------------------
            #                               DONE
            #-------------------------------------------------------------------
            # If reach this point without Exception, assign a "Success" status
            # for return in "finally" block.
            status = 0


        except (Exception), ex:
            line, filename, err = self.trace()
            msgText  = "ERROR:  Encountered exception in 'FT2_Scale16to8BitSet.execute'.\n%s\n" % (ex)
            msgText += "        At line %s of file '%s'." % (str(line), filename)
            arcpy.AddError(msgText)
            # Assign a "Failure" status for return in "finally" block.
            status = 1


        finally:
            # Check in the Spatial Analyst extension
            arcpy.CheckInExtension("Spatial")

            # Clean up memory and temp files, if they exist (ie. created and not
            # previously removed before any exception redirection).  Will use
            # arcpy to do so rather than Python operating system functions
            # because the 'files' will actually consist of sets of files and
            # directories that share the same root names, and arcpy methods will
            # remove all related files.
            #
            # NOTE:
            # If attempt to delete some temporary files either using arcpy
            # "Delete" function or an os function like "unlink", may get an
            # error similar to the following:
            #
            #     ERROR 000601: Cannot delete ...Scratch\temp16Raster.  May be
            #                   locked by another application.
            #
            # After much testing, it was discovered that the "rasterObj"
            # variable created earlier will hold an open link to that file, so
            # it is imperative to delete the variable first before attempting to
            # remove the file.  Since cleanup of the Scratch directory is not
            # essential to successful operations, any Exception triggered will
            # be recorded in the log as a warning but will otherwise be ignored.
            arcpy.SetProgressorLabel("Remove Temporary Files...")
            arcpy.AddMessage("Remove Temporary Files\n")
            try:
                try:
                    del fsObj
                except:
                    pass
                try:
                    del rasterObj
                except:
                    pass
                try:
                    del rasterObjScaled
                except:
                    pass
                if temp16Raster:
                    if arcpy.Exists(temp16Raster):
                        arcpy.Delete_management(temp16Raster, "")

                # Gather any remaining directory contents (eg. "info" directory
                # and log file, for example), then iterate and remove each item,
                # either by pruning directory trees or deleting individual files.
                if scratchDir:
                    contents = [os.path.join(scratchDir, i) for i in os.listdir(scratchDir)]
                    [shutil.rmtree(i) if os.path.isdir(i) else os.unlink(i) for i in contents]

            except (Exception), ex:
                line, filename, err = self.trace()
                msgText  = "WARNING:  Encountered exception in "            \
                           "'FT2_Scale16to8BitSet.execute' while removing " \
                           "temporary files.\n%s\n" % (ex)
                msgText += "          At line %s of file '%s'." % (str(line), filename)
                arcpy.AddWarning(msgText)

## TO DO >>> FIGURE OUT HOW TO EXPORT RESULTS WINDOW MESSAGES TO LOG
## import datetime
##
##            logFileName = os.path.join(workspace, datetime.datetime.now().strftime("FT2_Scale16to8BitSet_%Y%m%d_%H%M%S.log"))
##            logFile     = open(logFileName, "a")
##            logFile.write( arcpy.GetMessages() )
##            logFile.close()
##            arcpy.AddMessage(dir(FT2_Scale16to8BitSet))
##            arcpy.AddMessage(FT2_Scale16to8BitSet.__dict__)
##            z = arcpy.Result.
##            arcpy.AddMessage(z.getMessages(self))
## dir %APPDATA%\ESRI\Desktop10.3\ArcToolbox\History\


            return status
##
##
##
##    def __del__(self):
##        logFile = open(r"E:\FloodTest\test_dataset\QC_Richelieu\20110522_110144_FQ17\20110522_110144_FQ17.log", "a")
##        logFile.write( arcpy.GetMessages() )
##        logFile.close()


    ############################################################################
    ##                         NON-STANDARD METHODS                           ##
    ############################################################################
    ## The methods that follow have been listed in alphabetical order and are ##
    ## supplemental to the above standard methods that ArcGIS requires and    ##
    ## provides in skeletal format whenever a Python Toolbox is created.      ##
    ############################################################################

    # ================ #
    # Instance Methods #
    # ================ #
    def load16BitSarImageField(self, parameters):
        """
        When user enters a value into the Workspace data entry field, will
        retrieve a list of all polarized SAR images found in the "Mosaic"
        subdirectory and load them into the "16-Bit Sar Image" list field.  It
        will also make a single default selection to be processed using the
        following rules:
        - If only 1 file exists, that file will be chosen.
        - If multiple files exist and one of them is for the "HH" polarization
          channel, that file will be chosen.  Otherwise the first file will be
          selected.

        Parameters:
            TYPE        NAME            DESCRIPTION
            Parameter[] parameters      List of Parameter objects created for
                                        this class.  Will use elements 0, 1
                                        (Workspace, 16-Bit Polarized SAR Image)
                                        of this list.

        Return Values:
            None

        Limit(s) and Constraint(s) During Use:
            None.
        """
        if parameters[0].value != None:
            parameters[1].filter.list \
            = glob.glob(os.path.join(str(parameters[0].value),'Mosaic','*.tif'))
            if len(parameters[1].filter.list) == 1:
                parameters[1].values = parameters[1].filter.list
            elif len(parameters[1].filter.list) > 1:
                selectedFile = 0
                for i in range(len(parameters[1].filter.list)):
                    fileName = os.path.basename(parameters[1].filter.list[i])
                    if "_HH.tif" in fileName:
                        selectedFile = i
                        break
                parameters[1].values = [parameters[1].filter.list[selectedFile]]
        return


    def trace(self):
        """
        Provides additional details about the line of code that has triggered
        an Exception, useful for debugging.

        Parameters:
            TYPE        NAME            DESCRIPTION
            None

        Return Values:
            String[]
            - A 3-element list that provides additional details about the line
              of code that has triggered an Exception.  This includes the line
              number, the file number and the Exception text.

        Limit(s) and Constraint(s) During Use:
            None.
        """
        tb       = sys.exc_info()[2]
        tbinfo   = traceback.format_tb(tb)[0]
        line     = tbinfo.split(", ")[1]
        filename = os.path.join(sys.path[0], "FT2_Scale16to8BitSet.py")
        synerror = traceback.format_exc().splitlines()[-1]
        return line, filename, synerror


    # ============= #
    # Class Methods #
    # ============= #
    # NOTE: These have been created as Class rather than Instance methods to
    #       accomodate integration of this modules into the FT0_FloodTools
    #       wrapper.
    @staticmethod
    def validate16BitSARFiles(fileList):
        """
        Confirms that at least one polarized SAR image has been selected, and
        that the selected items exist and the user has access privileges to
        them.  Returns an error message if not.

        Parameters:
            TYPE        NAME            DESCRIPTION
            String[]    fileList        A list of SAR image paths and names that
                                        are to be converted from 16-bit to 8-bit.

        Return Values:
            String
            -  None  List of 16-bit input files is valid.
            - !None  16-bit input file(s) was not passed, or the path to one of
                     its files does not exist or is not accessible.  Value
                     returned will be an error message that can be displayed to
                     the user or recorded in the Results window or log file.

        Limit(s) and Constraint(s) During Use:
            None.
        """
        msgText = None
        if fileList == None or len(fileList) == 0:
            msgText = "ERROR:  No 16-bit SAR image file(s) have been selected."
        else:
            for filePath in fileList:
                filePath = str(filePath)
                if not os.path.isfile(filePath) or not os.access(filePath, os.R_OK):
                    msgText = "ERROR:  16-bit SAR image file '%s' does not " \
                              "exist or is not accessible." % (filePath)
                    break
        if msgText:
            return msgText
        else:
            return None


    @staticmethod
    def validateContrastStretch(contrastStretch):
        """
        Confirms that specified Contrast Stretch is one of the supported values.

        Parameters:
            TYPE        NAME            DESCRIPTION
            String     contrastStretch  Contrast Stretch algorithm that is to be
                                        used to convert 16-bit SAR image to
                                        8-bit.

        Return Values:
            String
            -  None  The specified Contrast Stretch is supported.
            - !None  The specified Contrast Stretch is unknown.  Value returned
                     will be an error message that can be displayed to the user
                     or recorded in the Results window or log file.

        Limit(s) and Constraint(s) During Use:
            None.
        """
        msgText = None
        if contrastStretch not in FT2_Scale16to8BitSet.SUPPORTED_CONTRASTSTRETCH:
            msgText = "ERROR:  Invalid Contrast Stretch '%s'.  Must be one " \
                      "of the %d supported values." %                        \
                      (contrastStretch, len(FT2_Scale16to8BitSet.SUPPORTED_CONTRASTSTRETCH))

        return msgText


    @staticmethod
    def validateWorkspace(workspace):
        """
        Confirms that Workspace directory and Mosaic subdirectories exist, the
        user has access privileges, and that at least 1 SAR ZIP file is present
        within the Mosaic directory.  Returns an error message if not.

        Parameters:
            TYPE        NAME            DESCRIPTION
            String      workspace       The path and name of the workspace
                                        directory below which all flood work
                                        is to take place and the Mosaic
                                        subdirectory and its polarized SAR
                                        images can be found.

        Return Values:
            String
            -  None  Workspace is valid and contains desired SAR images.
            - !None  Workspace was not passed, its path does not
                     exist or it is not accessible, or Mosaic subdirectory does
                     not exist, is not accessible. or does not contain polarized
                     SAR images.  Value returned will be an error message that
                     can be displayed to the user or recorded in the Results
                     window or log file.

        Limit(s) and Constraint(s) During Use:
            None.
        """
        msgText = None
        if workspace == None or len(workspace) == 0:
            msgText = "ERROR:  Workspace has not been passed."
        elif not os.path.isdir(workspace) or not os.access(workspace, os.R_OK):
            msgText = "ERROR:  Workspace '%s' does not exist or is not " \
                      "accessible." % (workspace)
        else:
            mosaicDir = os.path.join(workspace, "Mosaic")
            if not os.path.isdir(mosaicDir) or not os.access(mosaicDir, os.R_OK):
                msgText = "ERROR:  Mosaic directory '%s' in which polarized " \
                          "SAR images are to be found does not exist or is "  \
                          "not accessible." % (mosaicDir)
            else:
                sarImageList = glob.glob(os.path.join(mosaicDir,"*.tif"))
                if sarImageList == None or len(sarImageList) == 0:
                    msgText = "ERROR:  Mosaic directory '%s' does not " \
                              "contain 'tif' file SAR images." % (mosaicDir)
        return msgText


def main():
    """
        Allows FT2_Scale16to8BitSet Tool to be executed from commmand line
        instead of GUI.

        Function "main()" allows the FT2_Scale16to8BitSet module to be run as a
        script in batch, called from the command line or managing script rather
        than through a Toolbox in ArcCatalog or ArcMap, thereby bypassing the
        GUI interface provided by the Toolbox.  In this way, the application can
        be added to a processing chain, overseen by an orchestrating parent
        process, without requiring manual intervention between steps.  It uses
        argparse to exchange parameters with the command line.

        Usage:
            FT2_Scale16to8BitSet.py [-h] -img16 IMAGE16BIT -ws WORKSPACE


        Parameters:
            Parameters that take a file name will accept either relative or
            absolute paths.

            -h,                         Optional
            --help
                                        Show this help message and exit.

            -img16 IMAGE16BIT,          Mandatory
            --images16bit IMAGE16BIT
                                        16-bit Polarized Image(s).  One or more
                                        16-bit polarized images produced by the
                                        "FT1_R2ReadOrthoMosaic" tool.  These
                                        images should reside in the 'Mosaic'
                                        subdirectory, and when more than one is
                                        passed, each should represent a
                                        different polarization channel (HH, HV,
                                        VV, VH) and must be expressed as a
                                        quoted semi-colon delimitted string.
                                        Example:
                                        "D:\Floods\QC_Richelieu\20110507_225926_F6F\Mosaic\20110507_225926_UTM18_mos_HH.tif;D:\Floods\QC_Richelieu\20110507_225926_F6F\Mosaic\20110507_225926_UTM18_mos_HV.tif"

            -stretch CONTRASTSTRETCH,   Optional
            --contraststretch CONTRASTSTRETCH
                                        Contrast Stretch.  Linear stretching
                                        algorithm used to convert incoming
                                        16-bit SAR images to 8-bit.  Must be one
                                        of the following supported values:
                                        - 'Min-Max Range'
                                        - 'Min-90% Max Range'
                                        - '95% Confidence Interval'
                                        - '99% Confidence Interval'
                                        First two options are ones that should
                                        be most commonly used.  If not passed,
                                        will use default value of
                                        "Min-Max Range".
                                        Example:
                                        "Min-90% Max Range"

            -ws WORKSPACE,              Mandatory
            --workspace WORKSPACE
                                        Workspace.  Root directory that contains
                                        the 'Mosaic' subdirectory where the
                                        "FT1_R2ReadOrthoMosaic" tool has placed
                                        polarized SAR images during the first
                                        step of producing a Flood Product.
                                        Script will create subdirectories
                                        'Scaled', 'Scaled_Unfiltered' and
                                        'Scratch', if they are not already
                                        present, and will transform the
                                        polarized image files identified by the
                                        "-img" flag from 16-bit to 8-bit,
                                        producing both filtered images in the
                                        'Scaled' folder by applying a 3x3 median
                                        smoothing algorithm, and unfiltered
                                        images in the 'Scaled_Unfiltered' folder.
                                        Example:
                                        D:\Floods\QC_Richelieu\20110507_225926_F6F


        Return Values:
            Check on Windows OS with "echo %ERRORLEVEL%" after run.
            0       Successfully completed
            1       Error encountered during run.  Check messages issued to
                    standard output for details.
            2       Returned by "argparse" when mandatory parameter has not been
                    passed.


        Examples:
            Process Single Image
            --------------------
            C:\Python27\ArcGISx6410.3\python.exe FT2_Scale16to8BitSet.py ^
            -ws "D:\Floods\QC_Richelieu\20110507_225926_F6F" ^
            -img16 "D:\Floods\QC_Richelieu\20110507_225926_F6F\Mosaic\20110507_225926_UTM18_mos_HH.tif"

            Process Multiple Images, Specify Stretch Algorithm
            --------------------------------------------------
            C:\Python27\ArcGISx6410.3\python.exe FT2_Scale16to8BitSet.py ^
            -ws "D:\Floods\QC_Richelieu\20110507_225926_F6F" ^
            -img16 "D:\Floods\QC_Richelieu\20110507_225926_F6F\Mosaic\20110507_225926_UTM18_mos_HH.tif;D:\Floods\QC_Richelieu\20110507_225926_225926_F6F\Mosaic\20110507_UTM18_mos_HV.tif"
            -stretch "Min-90% Max Range"


        Limit(s) and Constraint(s) During Use:
            Must be submitted through 64-bit Python.
    """
    # SAMPLE CALLS FOR TESTING
    #
    # GET USAGE / HELP (MUST Use 64-bit Python)
    # C:\Python27\ArcGISx6410.3\python.exe FT2_Scale16to8BitSet.py -h
    #
    # CONVERT BOTH HH AND HV IMAGES TO 8-BIT
    # C:\Python27\ArcGISx6410.3\python.exe FT2_Scale16to8BitSet.py ^
    # -ws "E:\FloodTest\ON_AlbanyRiverForks\20160510_232540_W2" ^
    # -img16 "E:\FloodTest\ON_AlbanyRiverForks\20160510_232540_W2\Mosaic\20160510_232540_UTM16_mos_HH.tif;E:\FloodTest\ON_AlbanyRiverForks\20160510_232540_W2\Mosaic\20160510_232540_UTM16_mos_HV.tif"
    #
##C:\Python27\ArcGISx6410.3\python.exe FT2_Scale16to8BitSet.py -ws "E:\FloodTest\ON_AlbanyRiverForks\20160510_232540_W2" -img "E:\FloodTest\ON_AlbanyRiverForks\20160510_232540_W2\Mosaic\20160510_232540_UTM16_mos_HH.tif;E:\FloodTest\ON_AlbanyRiverForks\20160510_232540_W2\Mosaic\20160510_232540_UTM16_mos_HV.tif"

    DEBUG = False   # Set to True to see incoming parameters before "execute"
##    DEBUG = True    # Set to True to see incoming parameters before "execute"
    try:
        if DEBUG:
            print 'Argument List:\n', str(sys.argv)

        # Get Command Line Arguments (if running in batch and not through GUI)
        parser = argparse.ArgumentParser(
                            formatter_class=argparse.RawTextHelpFormatter,
                            description=
                            "Converts mosaicked 16-bit SAR images to 8-bit " +
                            "applies 3x3 rectangualr median\n"               +
                            "filter to results as second step in producing " +
                            "Flood Product.\n",
                            epilog=
                            "Examples:\n"                                                           +
                            "- Process Single Image\n"                                              +
                            "  C:\\Python27\\ArcGISx6410.3\\python.exe FT2_Scale16to8BitSet.py ^\n" +
                            "  -ws \"D:\\Floods\\QC_Richelieu\\20110507_225926_F6F\" ^\n"           +
                            "  -img \"D:\\Floods\\QC_Richelieu\\20110507_225926_F6F\\Mosaic\\20110507_225926_UTM18_mos_HH.tif\"\n\n" +
                            "- Process Multiple Images, Specify Stretch Algorithm\n"                                          +
                            "  C:\\Python27\\ArcGISx6410.3\\python.exe FT2_Scale16to8BitSet.py ^\n" +
                            "  -ws \"D:\\Floods\\QC_Richelieu\\20110507_225926_F6F\" ^\n"           +
                            "  -img \"D:\\Floods\\QC_Richelieu\\20110507_225926_F6F\\Mosaic\\20110507_225926_UTM18_mos_HH.tif;"      +
                            "D:\\Floods\\QC_Richelieu\\20110507_225926_F6F\\Mosaic\\20110507_UTM18_mos_HV.tif\"\n"            +
                            "  -stretch \"" + FT2_Scale16to8BitSet.SUPPORTED_CONTRASTSTRETCH[1] + "\"\n\n")
        parser.add_argument('-img16', '--image16bit',
                            required=True, action='store', dest='image16bit',
                            help="16-bit Polarized Image(s).  One or more 16-bit\n"          +
                                 "polarized images produced by the\n"                        +
                                 "\"FT1_R2ReadOrthoMosaic\" tool.  These images should\n"    +
                                 "reside in the 'Mosaic' subdirectory, and when more than\n" +
                                 "one is passed, each should represent a different\n"        +
                                 "polarization channel (HH, HV, VV, VH) and must be\n"       +
                                 "expressed as a quoted semi-colon delimitted string.\n"     +
                                 "Example:\n"                                                +
                                 "\"D:\\Floods\\QC_Richelieu\\20110507_225926_F6F\\Mosaic\\20110507_225926_UTM18_mos_HH.tif;" +
                                 "D:\\Floods\\QC_Richelieu\\20110507_225926_F6F\\Mosaic\\20110507_225926_UTM18_mos_HV.tif\"\n")
        # NOTE: The '%' signs in the stretch strings cause problems here and must be '%%' escaped.
        parser.add_argument('-stretch', '--contraststretch',
                            required=False, action='store', dest='contraststretch',
                            help="Contrast Stretch.  Linear stretching algorithm used to\n"  +
                                 "convert incoming 16-bit SAR images to 8-bit.  Must be\n"   +
                                 "one of the following supported values:\n"                  +
                                 str(FT2_Scale16to8BitSet.SUPPORTED_CONTRASTSTRETCH).replace("[","- ").replace(", ","\n- ").replace("]","\n").replace("%", "%%") +
                                 "First two options are ones that should be most commonly\n" +
                                 "used.  If not passed, will use default value of\n"         +
                                 "\"" + FT2_Scale16to8BitSet.SUPPORTED_CONTRASTSTRETCH[0].replace("%", "%%") + "\".\n" +
                                 "Example:\n"                                                +
                                 "\"" + FT2_Scale16to8BitSet.SUPPORTED_CONTRASTSTRETCH[1].replace("%", "%%") + "\"\n")
        parser.add_argument('-ws', '--workspace',
                            required=True, action='store', dest='workspace',
                            help="Workspace.  Root directory that contains the 'Mosaic'\n"     +
                                 "subdirectory where the \"FT1_R2ReadOrthoMosaic\" tool has\n" +
                                 "placed polarized SAR images during the first step of\n"      +
                                 "producing a Flood Product.  Script will create\n"            +
                                 "subdirectories 'Scaled', 'Scaled_Unfiltered' and\n"          +
                                 "'Scratch', if they are not already present, and will\n"      +
                                 "transform the polarized image files identified by the\n"     +
                                 "\"-img\" flag from 16-bit to 8-bit, producing both\n"        +
                                 "filtered images in the 'Scaled' folder by applying a\n"      +
                                 "3x3 median smoothing algorithm, and unfiltered images\n"     +
                                 "in the 'Scaled_Unfiltered' folder.\n"                        +
                                 "Example:\n"                                                  +
                                 "D:\\Floods\\QC_Richelieu\\20110507_225926_F6F\n")
        cmdLineFlags = parser.parse_args()

        # Create FT2_Scale16to8BitSet object and initialize its parameters.
        # Make sure relative paths are expressed as absolute paths or may get
        # error.
        #
        # Since "images" may be a semi-colon delimitted string, must first
        # convert each member of string is in absolute path format, easiest done
        # by first converting to list, setting each list member, then converting
        # back to delimiited string.
        ft2Obj = FT2_Scale16to8BitSet()
        params = ft2Obj.getParameterInfo()

        params[0].value = os.path.abspath(cmdLineFlags.workspace)
        images          = cmdLineFlags.image16bit.split(';')
        for i in range(0, len(images)):
            images[i] = os.path.abspath(images[i])
        params[1].value = ';'.join(images)

        if cmdLineFlags.contraststretch:
            params[2].value = cmdLineFlags.contraststretch

        if DEBUG:
            print "- Parameters To Be Passed To \"execute\" Method:"
            for param in params:
                print "  - "   + param.displayName
                print "    - TYPE : " + str(param.datatype)
                print "    - VALUE: " + str(param.value)

        # Submit job and return exit status to OS (can be checked with echo
        # %ERRORLEVEL% in Windows).  All arcpy.AddMessage, arcpy.AddWarning and
        # arcpy.AddError messages issued in "execute" will be sent to stdout
        # when run in batch.
        if DEBUG:
            print "- Call \"execute\":\n"
        status = ft2Obj.execute(params, None)
        if status:
            exit(1) # Failure
        else:
            exit(0) # Success


    except Exception as ex:
        logText = "ERROR:  Encountered exception in 'main':\n" \
                  "        %s." % (ex)
        print logText
        exit(1)


if __name__ == '__main__':
    main()